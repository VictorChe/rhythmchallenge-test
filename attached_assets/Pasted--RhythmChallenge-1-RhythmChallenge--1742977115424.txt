
# Техническое задание: RhythmChallenge (расширенная версия)

## 1. Общее описание
RhythmChallenge - это iOS приложение для тренировки чувства ритма. Приложение позволяет пользователям практиковать ритмические паттерны под метроном, получая мгновенную обратную связь о точности их исполнения.

## 2. Основные функции

### 2.1 Метроном
- Регулируемый темп (BPM) от 40 до 160. По умолчанию 90. Если пользователь изменит, сохраняем это значение в памяти для будущих запусков.
- Визуальная и звуковая индикация долей. Показываем пользователю какую долю он должен играть.
- Обратный отсчет перед началом тренировки (4,3,2,1), сопровождаемый звуком метронома в выбранном пользователем темпе и сопровождаемый визуальным отображение цифр.
- Звук клика метронома и тихий звук долей которые нужно сыграть.

### 2.2 Режимы тренировки
- Режим тапов (пользователь нажимает на экран)
- Режим микрофона (пользователь играет на инструменте)

### 2.3 Ритмические паттерны
- Четвертные ноты
- Восьмые ноты (пары)
- Три восьмые (триоль)
- Четвертная пауза
- (в дальнейшем список паттернов будет расширяться, например варианты с шестнадцатыми нотами, варианты с нотами с точкой и т.д.)

### 2.4 Обратная связь
- Мгновенная оценка точности попадания (Идеально/Хорошо/Неточно/Мимо). Во время тренировки пользователь тапает по экрану или издает звук своим инструментом, а приложение сообщает о точности попадания в эту ноту.
- Визуальная индикация текущего паттерна – текущий паттерн выделен рамкой
- Анимация при попадании/промахе с использованием текстовой индикации и цветовой кодировки
- Тактильная обратная связь (вибрация)

### 2.5 Результаты
- Процент точности. Идеальные и Хорошие попадания прибавляют процент. Неточные не влияют, пропущенные ноты и ноты сыгранные мимо снижают процент точности.
- Количество идеальных/хороших/неточных попаданий, количество пропущенных нот (именно нот, а не паттернов!).
- Общее время тренировки

## 3. Технические требования

### 3.1 Архитектура
- **Архитектурный паттерн**: MVVM (Model-View-ViewModel)
- **Структура проекта**:
  ```
РЕКОМЕНДАЦИЯ, можно предложить и другую схему.
  RhythmChallenge/
  ├── App/
  │   └── RhythmChallengeApp.swift
  ├── Models/
  │   ├── RhythmPattern.swift
  │   ├── TrainingResult.swift
  │   └── Settings.swift
  ├── ViewModels/
  │   ├── MetronomeViewModel.swift
  │   ├── RhythmTrainingViewModel.swift
  │   └── ResultsViewModel.swift
  ├── Views/
  │   ├── MainView.swift
  │   ├── MetronomeView.swift
  │   ├── TrainingView.swift
  │   └── ResultsView.swift
  ├── Services/
  │   ├── MetronomeService.swift
  │   ├── AudioCaptureService.swift
  │   ├── SpectralAnalysisService.swift
  │   ├── HapticsService.swift
  │   └── TimingService.swift
  └── Utils/
      ├── AudioAnalyzer.swift
      └── Constants.swift
  ```
- **Технологии**:
  - UI Framework: SwiftUI
  - Управление состоянием: Combine + @Published свойства
  - Хранение настроек: UserDefaults

### 3.2 Аудио
- **Технологии для работы с аудио**:
  - AVAudioEngine + AVAudioPlayerNode для воспроизведения звуков метронома
  - AudioKit для продвинутого анализа звука
  - AVAudioEngine + AVAudioPCMBuffer для работы с входным звуком
  - Использование категории аудиосессии `.playAndRecord` для режима микрофона
  - FFT анализ для спектрального анализа звука

- **Требования к обработке аудио**:
  - Звук должен воспроизводиться без пауз, зависаний
  - Минимальная задержка (латентность) при записи и анализе звука
  - Настройка минимального размера буфера для снижения задержки
  - Компенсация системной задержки при оценке точности

### 3.3 Производительность
- **Оптимизация работы с таймерами**:
  - Использование DispatchSourceTimer для высокоточного таймирования
  - Использование mach_absolute_time() для максимальной точности временных измерений
  - Алгоритмы компенсации дрифта временных интервалов
  - Синхронизация с системным временем

- **Оптимизация обработки аудио**:
  - Использование Accelerate.framework для эффективных математических вычислений
  - Оптимизация анализа спектра для работы в реальном времени
  - Эффективное использование памяти при обработке буферов аудио

### 3.4 Пользовательский интерфейс
- Стильный дизайн в духе работ на dribble
- Навигация через главный экран
- Адаптивный интерфейс
- Поддержка темной темы
- Интерфейс должен целиком вписываться в экран без скролла
- Индикация точности попадания с использованием цветовой кодировки:
  - Идеально: зеленый
  - Хорошо: синий/голубой
  - Неточно: желтый/оранжевый
  - Мимо: красный

## 4. Ключевые особенности реализации

### 4.1 Определение точности
- Пороги для разных типов попаданий:
  - Идеально: ±15% от интервала
  - Хорошо: ±30% от интервала
  - Неточно: ±50% от интервала
  - Мимо: >50% от интервала
- ± – означает, что еще до удара метронома пользователь может сделать попадание.
- Учет типа ритмического паттерна при определении точности. Если приложение показывает две восьмые, значит в одну долю пользователь должен сделать два удара.
- Защита от множественных попаданий – если пользователь сыграл четверть и сразу же сделал еще атаку, то этот удар считается мимо, кроме случаев, когда этот удар можно засчитать как ранний удар следующей ноты.

### 4.2 Обработка аудио
- **Отфильтровка звука метронома**:
  - Использование полосовых фильтров для исключения частот метронома
  - Спектральное вычитание характерных частот метронома из входящего сигнала

- **Калибровка под инструмент пользователя**:
  - Предварительная запись и анализ звуков инструмента пользователя
  - Создание "спектрального отпечатка" инструмента
  - Сравнение входящего звука с эталонным отпечатком
  - Адаптивный порог определения звука

- **Алгоритмы обработки сигнала**:
  - Фильтрация шумов с использованием полосовых и адаптивных фильтров
  - Определение пиковых значений звука инструмента
  - FFT анализ для определения характерных частот инструмента
  - Обнаружение пиков амплитуды для определения начала звуковых событий

- **Работа с задержками**:
  - Компенсация задержки аудио системы
  - Измерение и учет системной задержки при оценке точности

### 4.3 Таймеры
- Использование высокоточных таймеров (DispatchSourceTimer)
- Компенсация дрифта через корректировку интервалов
- Синхронизация с системным временем для долгосрочной стабильности
- Использование mach_absolute_time() для максимальной точности

## 5. Ограничения и исключения
- Минимальная версия iOS: 16.0
- Поддержка мультиязычности, но в первой версии только русский язык
- Поддержка только портретной ориентации
- Работа только на переднем плане
- Требуется разрешение на использование микрофона

## 6. Критерии успеха
- Стабильная работа метронома – метроном играет точно, как и должен играть метроном.
- Точное определение попаданий
- Отзывчивый интерфейс
- Низкое энергопотребление
- Отсутствие утечек памяти
- Корректная работа с аудио

## 7. Технические компоненты и их реализация

### 7.1 Воспроизведение звуков метронома
- AVAudioEngine – для воспроизведения звуков с минимальной задержкой
- AVAudioPlayerNode – для управления воспроизведением кликов метронома
- Возможное использование AudioKit для более продвинутой обработки звука

### 7.2 Работа с микрофоном и анализ входящего звука
- AVAudioEngine + AVAudioPCMBuffer – для работы с входным звуком в реальном времени без задержек
- AudioKit – для анализа звука, определения пиков, фильтрации шума, устранения эха
- FFT анализ – для спектрального анализа сигнала и отличия звука инструмента от шумов

### 7.3 Высокоточные таймеры
- DispatchSourceTimer – высокоточный таймер, работающий без сбоев в фоне
- Механизмы компенсации дрифта для поддержания постоянного темпа

### 7.4 Фильтрация шума и исключение звука метронома
- AVAudioEngine + полосовые фильтры – для исключения частот метронома
- AudioKit's FFT Analysis – для анализа частотного спектра и отбрасывания нежелательных звуков

### 7.5 Компенсация задержки
- AVAudioSession.configure() – настройка минимального размера буфера для снижения задержки
- Алгоритмы компенсации латентности в реальном времени

8.1 Зависимости
Podfile:
pod 'AudioKit'
pod 'SwiftChart'
8.2 Конфигурация проекта
Минимальная версия iOS: 16.0
Swift version: 5.0
Deployment Target: iOS only
Bundle Identifier: com.example.RhythmChallenge
Обязательное наличие Info.plist с настройками микрофона
9. Особенности реализации
9.1 Работа с памятью
Использование weak references для делегатов
Правильное освобождение аудио ресурсов
Контроль за циклами удержания в замыканиях
9.2 Обработка ошибок
Корректная обработка ошибок при инициализации аудио сессии
Обработка отказа в доступе к микрофону
Восстановление после сбоев в работе аудио движка


10. Требования к сборке
10.1 Конфигурации
Debug: с подробным логированием
Release: с оптимизациями
TestFlight: промежуточная конфигурация
11. Безопасность
11.1 Работа с данными
Безопасное хранение настроек пользователя
Корректная обработка разрешений (микрофон)
Защита от сбоев при работе с файловой системой
11.2 Валидация входных данных
Проверка корректности BPM
Валидация аудио входа
Защита от некорректных пользовательских действий
12. Мониторинг и отладка
12.1 Логирование
Детальное логирование аудио событий
Отслеживание производительности
Сбор метрик точности попадания
12.2 Профилирование
Мониторинг использования CPU
Контроль утечек памяти
Анализ задержек аудио

Дополнительная информаця:
Геймикации не планируется
Истории тренировок и анализа прогресса пока не будет
Выбор звука не делаем
Пользователь может играть на любом инструменте, включая просто хлопки ладошами
По технологиям (библиотеки, фреймворки), можно предложить и другой стек. Важно, что чем меньше кода тем лучше, но точность работы метронома и учета данных с метронома – это первый приоритет.
Прежде чем начинать разработку изучи какие есть существующие метрономы и какие технологии они используют.
